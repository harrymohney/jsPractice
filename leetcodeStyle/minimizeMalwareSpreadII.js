function minMalwareSpread(graph, initial) {
  initial.sort((a, b) => a - b);
  const n = graph.length;
  const visited = new Array(n).fill(false);

  const dfs = (node, infectedSet) => {
      infectedSet.add(node);
      visited[node] = true;
      for (let next = 0; next < n; next++) {
          if (graph[node][next] === 1 && !visited[next] && !infectedSet.has(next)) {
              dfs(next, infectedSet);
          }
      }
  };

  const infectedCount = new Array(n).fill(0);
  for (const node of initial) {
      const infectedSet = new Set();
      dfs(node, infectedSet);
      for (const infected of infectedSet) {
          infectedCount[infected]++;
      }
  }

  let maxSaved = 0;
  let result = -1;
  for (const node of initial) {
      const saved = infectedCount[node] - 1; // removing this node
      if (saved > maxSaved || (saved === maxSaved && node < result)) {
          maxSaved = saved;
          result = node;
      }
  }

  return result;
}
